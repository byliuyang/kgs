// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dep

import (
	"database/sql"

	"github.com/byliuyang/app/fw"
	"github.com/byliuyang/app/modern/mdcli"
	"github.com/byliuyang/app/modern/mddb"
	"github.com/byliuyang/app/modern/mdenv"
	"github.com/byliuyang/app/modern/mdgrpc"
	"github.com/byliuyang/app/modern/mdlogger"
	"github.com/byliuyang/app/modern/mdservice"
	"github.com/byliuyang/app/modern/mdtracer"
	"github.com/byliuyang/kgs/app/adapter/db"
	"github.com/byliuyang/kgs/app/adapter/rpc"
	"github.com/byliuyang/kgs/app/usecase/keys/gen"
	"github.com/byliuyang/kgs/app/usecase/keys/producer"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitCommandFactory() fw.CommandFactory {
	cobraFactory := mdcli.NewCobraFactory()
	return cobraFactory
}

func InitDBConnector() fw.DBConnector {
	postgresConnector := mddb.NewPostgresConnector()
	return postgresConnector
}

func InitDBMigrationTool() fw.DBMigrationTool {
	postgresMigrationTool := mddb.NewPostgresMigrationTool()
	return postgresMigrationTool
}

func InitEnvironment() fw.Environment {
	goDotEnv := mdenv.NewGoDotEnv()
	return goDotEnv
}

func InitGRpcService(name string, sqlDB *sql.DB, securityPolicy fw.SecurityPolicy) (mdservice.Service, error) {
	availableKeySQL := db.NewAvailableKeySQL(sqlDB)
	v := gen.NewBase62()
	alphabet, err := gen.NewAlphabet(v)
	if err != nil {
		return mdservice.Service{}, err
	}
	logger := mdlogger.NewLocal()
	persist := producer.NewPersist(availableKeySQL, alphabet, logger)
	keyGenController := rpc.NewKeyGenController(persist)
	kgsAPI := rpc.NewKgsAPI(keyGenController)
	gRpc, err := mdgrpc.NewGRpc(kgsAPI, securityPolicy)
	if err != nil {
		return mdservice.Service{}, err
	}
	service := mdservice.New(name, gRpc, logger)
	return service, nil
}

// wire.go:

var observabilitySet = wire.NewSet(mdlogger.NewLocal, mdtracer.NewLocal)
